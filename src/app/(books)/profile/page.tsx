"use client"; // –≠–Ω—ç –∑–∞–∞–≤—Ä—ã–≥ —Ö–∞–º–≥–∏–π–Ω —ç—Ö—ç–Ω–¥ –±–∏—á–∏—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π

import React, { useEffect, useState } from "react";
import { auth, db, storage } from "@/firebaseConfig";
import { onAuthStateChanged, User } from "firebase/auth";
import ProfileBookCard from "@/components/profileBookCard";
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  deleteDoc,
  updateDoc,
  getDoc,
} from "firebase/firestore";
import { ref, deleteObject } from "firebase/storage";
import { Dot, User as UserLucide } from "lucide-react";

// üìå –ù–æ–º—ã–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å
interface Book {
  id: string;
  title: string;
  author: string;
  price: number;
  imageUrl?: string;
}

// üìå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–Ω –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å
interface UserInfo {
  name?: string;
  phone?: string;
  email?: string;
}

// üìå –•“Ø—Å—ç–ª—Ç–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å
interface Request {
  id: string;
  bookId: string;
  userId: string;
  status: "—Ö“Ø–ª—ç—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞" | "–±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω" | "—Ü—É—Ü–ª–∞–≥–¥—Å–∞–Ω";
  date: string;
}

// üìö –ù–æ–º —É—Å—Ç–≥–∞—Ö —Ñ—É–Ω–∫—Ü
const deleteBookFromFirestore = async (bookId: string, imageUrl: string) => {
  const bookRef = doc(db, "books", bookId);
  try {
    // –ù–æ–º —É—Å—Ç–≥–∞—Ö
    await deleteDoc(bookRef);

    // –ó—É—Ä–∞–≥ —É—Å—Ç–≥–∞—Ö (—Ö—ç—Ä—ç–≤ –∑—É—Ä–∞–≥ –±–∞–π–≥–∞–∞ –±–æ–ª)
    if (imageUrl) {
      const imageRef = ref(storage, imageUrl);
      await deleteObject(imageRef);
    }

    console.log("–ù–æ–º –∞–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞!");
  } catch (error) {
    console.error("–ù–æ–º —É—Å—Ç–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
  }
};

// ‚úèÔ∏è –ù–æ–º –∑–∞—Å–∞—Ö —Ñ—É–Ω–∫—Ü
const updateBookInFirestore = async (
  bookId: string,
  updatedData: Partial<Book>
) => {
  const bookRef = doc(db, "books", bookId);
  try {
    await updateDoc(bookRef, updatedData);
    console.log("–ù–æ–º –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç!");
  } catch (error) {
    console.error("–ù–æ–º —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
  }
};

// üîÑ –ù–æ–º—ã–Ω –Ω—ç—Ä–∏–π–≥ —Ç–∞—Ç–∞—Ö —Ñ—É–Ω–∫—Ü
const fetchBookTitle = async (bookId: string): Promise<string> => {
  try {
    const bookDoc = doc(db, "books", bookId);
    const bookSnapshot = await getDoc(bookDoc);
    if (bookSnapshot.exists()) {
      const bookData = bookSnapshot.data();
      return bookData.title || "–ù—ç—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π";
    }
    return "–ù–æ–º –æ–ª–¥—Å–æ–Ω–≥“Ø–π";
  } catch (error) {
    console.error("–ù–æ–º—ã–Ω –Ω—ç—Ä —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
    return "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞";
  }
};

const BookTitleCell: React.FC<{ bookId: string }> = ({ bookId }) => {
  const [title, setTitle] = useState<string>("–ê—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...");

  useEffect(() => {
    const fetchTitle = async () => {
      const fetchedTitle = await fetchBookTitle(bookId);
      setTitle(fetchedTitle);
    };
    fetchTitle();
  }, [bookId]);

  return <span>{title}</span>;
};

const Profile = () => {
  const [user, setUser] = useState<User | null>(null);
  const [userBooks, setUserBooks] = useState<Book[]>([]);
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null); // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª
  const [myRequests, setMyRequests] = useState<Request[]>([]); // –ú–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥

  // üìö Firestore-—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω–æ–º—ã–≥ —Ç–∞—Ç–∞—Ö —Ñ—É–Ω–∫—Ü
  const fetchUserBooks = async (userId: string) => {
    const q = query(collection(db, "books"), where("userId", "==", userId)); // userId-–∞–∞—Ä —à“Ø“Ø—Ö
    const querySnapshot = await getDocs(q);

    const books: Book[] = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...(doc.data() as Omit<Book, "id">),
    }));
    setUserBooks(books);
  };

  // üîÑ Firestore-—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ç–∞—Ç–∞—Ö
  const fetchUserInfo = async (uid: string) => {
    const userDoc = doc(db, "users", uid);
    const userSnapshot = await getDoc(userDoc);
    if (userSnapshot.exists()) {
      const userData = userSnapshot.data() as UserInfo;
      setUserInfo(userData);
    }
  };

  // üîÑ Firestore-—Å –º–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥–∏–π–≥ —Ç–∞—Ç–∞—Ö
  const fetchMyRequests = async (uid: string) => {
    try {
      const q = query(collection(db, "requests"), where("buyerId", "==", uid));
      const querySnapshot = await getDocs(q);

      const requests: Request[] = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...(doc.data() as Omit<Request, "id">),
      }));

      console.log("–ú–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥:", requests); // –•“Ø—Å—ç–ª—Ç“Ø“Ø–¥–∏–π–≥ –∫–æ–Ω—Å–æ–ª–¥ —Ö—ç–≤–ª—ç—Ö
      setMyRequests(requests);
    } catch (error) {
      console.error("–ú–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥–∏–π–≥ —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
    }
  };

  // üîÑ Firebase-–∞–∞—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ç–∞—Ç–∞—Ö
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);

      // –•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á –Ω—ç–≤—Ç—ç—Ä—Å—ç–Ω –±–æ–ª —Ç—É—Ö–∞–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω–æ–º –±–æ–ª–æ–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ç–∞—Ç–∞—Ö
      if (currentUser?.email) {
        fetchUserBooks(currentUser.uid);
        fetchUserInfo(currentUser.uid);
        fetchMyRequests(currentUser.uid);
      }
    });

    return () => unsubscribe();
  }, []);

  // üìö –ù–æ–º –∑–∞—Å–∞—Ö —Ñ—É–Ω–∫—Ü
  const handleEditBook = async (bookId: string) => {
    const updatedData: Partial<Book> = {
      title: prompt("–®–∏–Ω—ç –Ω–æ–º—ã–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É") || "",
    };
    if (updatedData.title) {
      await updateBookInFirestore(bookId, updatedData);
      fetchUserBooks(user?.uid || ""); // –®–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ —Ç–∞—Ç–∞—Ö
    }
  };

  // üóëÔ∏è –ù–æ–º —É—Å—Ç–≥–∞—Ö —Ñ—É–Ω–∫—Ü
  const handleDeleteBook = async (bookId: string, imageUrl: string) => {
    await deleteBookFromFirestore(bookId, imageUrl);
    setUserBooks(userBooks.filter((book) => book.id !== bookId)); // UI-–≥–∞–∞—Å —Ö–∞—Å–∞—Ö
  };

  // üóëÔ∏è –•“Ø—Å—ç–ª—Ç —Ü—É—Ü–ª–∞—Ö —Ñ—É–Ω–∫—Ü
  const handleCancelRequest = async (requestId: string) => {
    try {
      // Firestore-–æ–æ—Å —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —É—Å—Ç–≥–∞—Ö
      await deleteDoc(doc(db, "requests", requestId));

      // UI-–∞–∞—Å —É—Å—Ç–≥–∞—Ö
      setMyRequests((prev) =>
        prev.filter((request) => request.id !== requestId)
      );

      alert("–•“Ø—Å—ç–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞!");
    } catch (error) {
      console.error("–•“Ø—Å—ç–ª—Ç —Ü—É—Ü–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      alert("–•“Ø—Å—ç–ª—Ç —Ü—É—Ü–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!");
    }
  };

  return (
    <div
      className="w-full h-screen flex flex-col items-center overflow-y-auto 
                [&::-webkit-scrollbar]:w-2 
                [&::-webkit-scrollbar-track]:bg-white
                [&::-webkit-scrollbar-thumb]:bg-black
                [&::-webkit-scrollbar-track]:rounded-full
                [&::-webkit-scrollbar-thumb]:rounded-full bg-[#1a1a1a] text-white p-5"
    >
      <div className="w-full">
        {user && userInfo ? (
          <div className="bg-[#252525] p-4 h-50 flex justify-between items-center  rounded-lg border border-[#2f2f2f]">
            <div className="flex items-center flex-1 gap-5">
              <UserLucide className="h-40 w-40 bg-[#1a1a1a] border border-[#2f2f2f] rounded-lg" />
              <div className="flex flex-col gap-2 h-full justify-center p-3 border-l-2 border-white">
                <p className="text-xl font-bold">–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª</p>
                {userInfo.name && (
                  <p className="inline-flex  gap-2">
                    <Dot /> {userInfo.name}
                  </p>
                )}
                <p className="inline-flex  gap-2">
                  <Dot />
                  {user.email}
                </p>
                {userInfo.phone && (
                  <p className="inline-flex  gap-2">
                    <Dot />
                    {userInfo.phone}
                  </p>
                )}
              </div>
            </div>
            <div className="flex-1 bg-[#1a1a1a] h-full rounded-lg p-3">
              {/* üìã –ú–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥ */}
              <h3 className="text-lg font-semibold h-1/5 ">–ú–∏–Ω–∏–π —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥</h3>

              {myRequests.length === 0 ? (
                <p className="text-gray-400 h-4/5  bg-gray-600 rounded-lg p-2">
                  –¢–∞–Ω—ã –≥–∞—Ä–≥–∞—Å–∞–Ω —Ö“Ø—Å—ç–ª—Ç –∞–ª–≥–∞ –±–∞–π–Ω–∞.
                </p>
              ) : (
                <div
                  className="space-y-4 h-4/5 rounded-lg overflow-y-scroll 
                [&::-webkit-scrollbar]:w-2 
                [&::-webkit-scrollbar-track]:bg-white
                [&::-webkit-scrollbar-thumb]:bg-black
                [&::-webkit-scrollbar-track]:rounded-full
                [&::-webkit-scrollbar-thumb]:rounded-full"
                >
                  <table className="w-full text-sm text-left bg-[#252525] rtl:text-righttext-gray-400">
                    <thead className="text-xs uppercase text-gray-400">
                      <tr>
                        <th className="px-6 py-3">–ù–æ–º—ã–Ω –Ω—ç—Ä</th>
                        <th className=" px-6 py-3">–¢”©–ª”©–≤</th>
                        <th className="px-6 py-3">–û–≥–Ω–æ–æ</th>
                        <th className="px-6 py-3">“Æ–π–ª–¥—ç–ª</th>
                      </tr>
                    </thead>
                    <tbody>
                      {myRequests.map((request) => (
                        <tr
                          key={request.id}
                          className=" border-b border-gray-700 hover:bg-gray-600"
                        >
                          <td className="px-6 py-4">
                            {/* –ù–æ–º—ã–Ω –Ω—ç—Ä–∏–π–≥ fetchBookTitle —Ñ—É–Ω–∫—Ü—ç—ç—Ä —Ç–∞—Ç–∞—Ö */}
                            <BookTitleCell bookId={request.bookId} />
                          </td>
                          <td className="px-6">{request.status}</td>
                          <td>
                            {new Date(request.date).toLocaleDateString("mn-MN")}
                          </td>
                          <td className="px-6">
                            <button
                              onClick={() => handleCancelRequest(request.id)} // –¶—É—Ü–ª–∞—Ö —Ñ—É–Ω–∫—Ü –¥—É—É–¥–∞—Ö
                              className="h-10 px-4  bg-[#4d302b] text-white rounded-lg cursor-pointer"
                            >
                              –¶—É—Ü–ª–∞—Ö
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="text-gray-400">–ù—ç–≤—Ç—ç—Ä—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–ª–≥–∞!</div>
        )}

        {/* üìö –ú–∏–Ω–∏–π –Ω–∏–π—Ç—ç–ª—Å—ç–Ω –Ω–æ–º–Ω—É—É–¥ */}
        <h3 className="text-xl font-semibold mb-4">–ú–∏–Ω–∏–π –Ω–∏–π—Ç—ç–ª—Å—ç–Ω –Ω–æ–º–Ω—É—É–¥</h3>

        {userBooks.length === 0 ? (
          <p className="text-gray-400">–¢–∞ –æ–¥–æ–æ–≥–æ–æ—Ä –Ω–æ–º –Ω—ç–º—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.</p>
        ) : (
          <div className="grid grid-cols-6 gap-6">
            {userBooks.map((book) => (
              <ProfileBookCard
                key={book.id}
                id={parseInt(book.id, 10)}
                title={book.title}
                author={book.author}
                price={book.price}
                imageUrl={book.imageUrl || "/images/book.png"}
                onEdit={() => handleEditBook(book.id)}
                onDelete={() => handleDeleteBook(book.id, book.imageUrl || "")}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Profile;
